= tray-checkout

Tray Checkout API

== Installing

=== Gemfile
  gem 'tray-checkout'


=== Direct installation
  $ gem install tray-checkout


== Using

  require 'tray-checkout'

  transaction = Tray::Checkout::Transaction.new

Getting an existing transaction:
  response = transaction.get("522045453u5uu32e0u8014f060uuu5uu")
  response.success? # => true

  # Transaction
  response.transaction[:token]         # => "522045453u5uu32e0u8014f060uuu5uu"
  response.transaction[:id]            # => 501
  response.transaction[:status]        # => :waiting_payment
  response.transaction[:status_name]   # => "Aguardando Pagamento"
  response.transaction[:price_payment] # => 213.21
  response.transaction[:price_seller]  # => 199.19
  response.transaction[:split]         # => 1
  response.transaction[:date_transaction].strftime("%d/%m/%Y") # => "03/12/2012"

  # Payment
  response.payment[:method]      # => :boleto
  response.payment[:method_name] # => "Boleto Bancario"
  response.payment[:price]       # => 213.21
  response.payment[:split]       # => 1
  response.payment[:url]         # => "http://checkout.sandbox.tray.com.br/payment/billet/u9uuu8731319u59u3073u9011uu6u6uu"

  # Customer
  response.customer[:name]  # => "Pedro Bonamides"
  response.customer[:email] # => "pedro@bo.com.br"
  response.customer[:cpf]   # => "18565842673"

When the transaction is not found:
  response = transaction.get("xxxxx00000yyyy")
  response.success?                 # => false
  response.transaction[:id]         # => nil
  response[:errors].first[:code]    # => "003042"
  response[:errors].first[:message] # => "Transação não encontrada"

Creating a successful transaction:
  response = transaction.create(
    token_account: "123u5uu9ef36f7u",
    customer: {
      name: "Pedro Bonamides",
      cpf: "18565842673",
      email: "pedro@bo.com.br",
      sex: :male,
      marital_status: :single,
      contacts: [
        { type: :home,
          number: "1142360873"
        }
      ],
      addresses: [
        { type: :billing,
          street: "Avenida Pedro Alvares Cabral",
          number: "123",
          neighborhood: "Parque Ibirapuera",
          postal_code: "04094050",
          city: "São Paulo",
          state: "SP"
        }
      ]
    },
    transaction: {
      order_number: "R1245",
      shipping_type: "Sedex",
      shipping_price: 13.94,
      url_notification: "http://prodis.blog.br/tray_notification"
      products: [
        { code: "LOGO-8278",
          quantity: 2,
          price_unit: 100.99,
          description: "Logo Prodis"
        },
        { code: "877",
          quantity: 1,
          price_unit: 10.00,
          description: "Outro produto"
        }
      ]
    },
    payment: {
      method: :mastercard,
      split: 3,
      card: {
        name: "ZEFINHA NOCEGA",
        number: "5105105105105100",
        expdate_month: "09",
        expdate_year: "2015",
        cvv: "123"
      }
    }
  )
  response.success? # => true

  # Transaction
  response.transaction[:token]         # => "87654321u5uu92e4u09876543uuu5uu"
  response.transaction[:id]            # => 503
  response.transaction[:status]        # => :approved
  response.transaction[:status_name]   # => "Aprovada"
  response.transaction[:price_payment] # => 213.21
  response.transaction[:price_seller]  # => 199.19
  response.transaction[:split]         # => 3
  response.transaction[:date_transaction].strftime("%d/%m/%Y") # => "05/12/2012"

  # Payment
  response.payment[:method]      # => :mastercard
  response.payment[:method_name] # => "Mastercard"
  response.payment[:price]       # => 213.21
  response.payment[:split]       # => 3
  response.payment[:url]         # => "http://checkout.sandbox.tray.com.br/payment/billet/u9uuu8731319u59u3073u9011uu6u6uu"

  # Customer
  response.customer[:name]  # => "Pedro Bonamides"
  response.customer[:email] # => "pedro@bo.com.br"
  response.customer[:cpf]   # => "18565842673"


== Author
- {Fernando Hamasaki (prodis)}[http://prodis.blog.br]


== Contributing to tray-checkout

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
* Fork the project.
* Start a feature/bugfix branch.
* Commit and push until you are happy with your contribution.
* Don't forget to rebase with branch master in main project before submit the pull request.
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.


== Copyright

(The MIT License)

{Prodis a.k.a. Fernando Hamasaki}[http://prodis.blog.br]

http://prodis.net.br/images/prodis_150.gif

Copyright (c) 2012 Prodis

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

